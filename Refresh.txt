import axios from 'axios';
import { getAuthTokenDetails } from './token';
import clientPromise from 'lib/mongodb';
import { Databases } from '@components/Data/enums';

const TEN_DAYS_IN_MS = 10 * 24 * 60 * 60 * 1000;

// Helper function to update token details in the DB
async function updateAuthToken(
  tokenType: 'instagram' | 'facebook',
  newToken: string,
  expiresIn: number
) {
  const client = await clientPromise;
  const database = client.db(Databases.maxbupa);
  const tokensCollection = database.collection('env');
  const newExpiry = new Date(Date.now() + expiresIn * 1000);
  await tokensCollection.updateOne(
    { type: tokenType },
    {
      $set: {
        accessToken: newToken,
        expiryDate: newExpiry,
        lastRefreshed: new Date(),
      },
    }
  );
}

export const refreshInstagramToken = async (): Promise<string> => {
  // Get the token details from the DB for Instagram
  const tokenDetails = await getAuthTokenDetails('instagram');
  const currentToken = tokenDetails.accessToken;
  const expiryDate = new Date(tokenDetails.expiryDate);
  const timeRemaining = expiryDate.getTime() - Date.now();

  if (timeRemaining < TEN_DAYS_IN_MS) {
    // Call Instagram refresh endpoint
    const refreshUrl = `https://graph.instagram.com/refresh_access_token?grant_type=ig_refresh_token&access_token=${currentToken}`;
    const { data } = await axios.get(refreshUrl);
    // If a new token is returned, update the DB
    if (data.access_token && data.access_token !== currentToken) {
      await updateAuthToken('instagram', data.access_token, data.expires_in);
      return data.access_token;
    }
  }
  return currentToken;
};

export const refreshFacebookToken = async (): Promise<string> => {
  // Get the token details from the DB for Facebook
  const tokenDetails = await getAuthTokenDetails('facebook');
  const currentToken = tokenDetails.accessToken;
  const expiryDate = new Date(tokenDetails.expiryDate);
  const timeRemaining = expiryDate.getTime() - Date.now();

  if (timeRemaining < TEN_DAYS_IN_MS) {
    // Use your app credentials from env variables
    const appId = process.env.FACEBOOK_APP_ID;
    const appSecret = process.env.FACEBOOK_APP_SECRET;
    const refreshUrl = `https://graph.facebook.com/oauth/access_token?grant_type=fb_exchange_token&client_id=${appId}&client_secret=${appSecret}&fb_exchange_token=${currentToken}`;
    const { data } = await axios.get(refreshUrl);
    // If a new token is returned, update the DB
    if (data.access_token && data.access_token !== currentToken) {
      await updateAuthToken('facebook', data.access_token, data.expires_in);
      return data.access_token;
    }
  }
  return currentToken;
};


use yourDatabaseName;  // Switch to your database

db.env.insertMany([
  {
    type: "instagram",
    accessToken: "YOUR_INSTAGRAM_ACCESS_TOKEN",
    expiryDate: new Date("2025-05-01T00:00:00Z"),  // Adjust the expiry date as needed
    lastRefreshed: new Date()
  },
  {
    type: "facebook",
    accessToken: "YOUR_FACEBOOK_ACCESS_TOKEN",
    expiryDate: new Date("2025-05-01T00:00:00Z"),
    lastRefreshed: new Date()
  }
]);
