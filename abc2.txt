// pages/api/instagram-timeline/index.tsx
import axios from 'axios';
import type { NextApiRequest, NextApiResponse } from 'next';

export async function fetchInstagramPosts() {
  const accessToken = process.env.INSTAGRAM_ACCESS_TOKEN;
  const baseURL = process.env.INSTAGRAM_GRAPH_API_ENDPOINT;
  const apiUrl = `${baseURL}/v21.0/me/media?fields=id,caption,media_type,media_url,permalink,thumbnail_url,timestamp&access_token=${accessToken}`;
  
  const { data } = await axios.get(apiUrl);
  // Optionally remove extra keys if not needed
  delete data.id;
  delete data.paging;
  return data; // Expected to have a "data" field that is an array of posts
}

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  if (req.method !== 'GET') {
    return res
      .status(405)
      .json({ success: false, message: 'Method not allowed' });
  }
  try {
    const posts = await fetchInstagramPosts();
    res.status(200).json({ success: true, data: posts });
  } catch (error) {
    console.error('Error fetching Instagram posts:', error);
    res.status(500).json({ success: false, message: 'Internal server error' });
  }
}





// pages/api/facebook-timeline/index.tsx
import axios from 'axios';
import type { NextApiRequest, NextApiResponse } from 'next';

export async function fetchFacebookPosts() {
  const accessToken = process.env.FACEBOOK_ACCESS_TOKEN;
  const baseURL = process.env.FACEBOOK_GRAPH_API_ENDPOINT;
  const pageId = process.env.FACEBOOK_PAGE_ID; // Set this in your .env file
  const apiUrl = `${baseURL}/v22.0/${pageId}/posts?fields=id,created_time,message,attachments{media}&access_token=${accessToken}`;
  
  const { data } = await axios.get(apiUrl);
  return data; // Expected to have a "data" field that is an array of posts
}

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  if (req.method !== 'GET') {
    return res
      .status(405)
      .json({ success: false, message: 'Method not allowed' });
  }
  try {
    const posts = await fetchFacebookPosts();
    res.status(200).json({ success: true, data: posts });
  } catch (error) {
    console.error('Error fetching Facebook posts:', error);
    res.status(500).json({ success: false, message: 'Internal server error' });
  }
}




// pages/api/social-timeline/index.tsx
import type { NextApiRequest, NextApiResponse } from 'next';
import axios from 'axios';
import { fetchInstagramPosts } from '../instagram-timeline';
import { fetchFacebookPosts } from '../facebook-timeline';

/** 
 * Refresh Instagram long-lived token  
 * Docs: https://developers.facebook.com/docs/instagram-basic-display-api/refresh-access-token
 */
const refreshInstagramToken = async () => {
  try {
    const accessToken = process.env.INSTAGRAM_ACCESS_TOKEN;
    const baseURL = process.env.INSTAGRAM_GRAPH_API_ENDPOINT;
    const refreshUrl = `${baseURL}/refresh_access_token?grant_type=ig_refresh_token&access_token=${accessToken}`;
    const response = await axios.get(refreshUrl);
    console.log('Instagram token refreshed:', response.data);
    // Optionally, update your stored token here if needed
  } catch (error) {
    console.error('Error refreshing Instagram token:', error);
  }
};

/**
 * Refresh Facebook token  
 * Docs: https://developers.facebook.com/docs/facebook-login/access-tokens/refreshing/
 */
const refreshFacebookToken = async () => {
  try {
    const accessToken = process.env.FACEBOOK_ACCESS_TOKEN;
    const appId = process.env.FACEBOOK_APP_ID; // Add to your .env
    const appSecret = process.env.FACEBOOK_APP_SECRET; // Add to your .env
    const baseURL = process.env.FACEBOOK_GRAPH_API_ENDPOINT;
    const refreshUrl = `${baseURL}/v22.0/oauth/access_token?grant_type=fb_exchange_token&client_id=${appId}&client_secret=${appSecret}&fb_exchange_token=${accessToken}`;
    const response = await axios.get(refreshUrl);
    console.log('Facebook token refreshed:', response.data);
    // Optionally, update your stored token here if needed
  } catch (error) {
    console.error('Error refreshing Facebook token:', error);
  }
};

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  if (req.method !== 'GET') {
    return res
      .status(405)
      .json({ success: false, message: 'Method not allowed' });
  }
  
  try {
    // Refresh both tokens in parallel
    await Promise.all([refreshInstagramToken(), refreshFacebookToken()]);

    // Fetch posts concurrently from both sources
    const [instaData, fbData] = await Promise.all([
      fetchInstagramPosts(),
      fetchFacebookPosts()
    ]);

    // Instagram API typically returns an object like { data: [...] }
    const instagramPosts = instaData.data || [];

    // Facebook API returns an object with a "data" array of posts.
    // Normalize the Facebook posts to match the Instagram post format.
    const facebookRawPosts = fbData.data || [];
    const facebookPosts = facebookRawPosts.map((post: any) => ({
      id: post.id,
      caption: post.message || '',
      timestamp: post.created_time,
      media_url: post.attachments?.data?.[0]?.media?.image?.src || '',
      permalink: '', // You can construct a URL if needed
      media_type: 'image' // Adjust if your page posts include other types
    }));

    // Merge both arrays
    const combinedPosts = [...instagramPosts, ...facebookPosts];

    // Sort posts by timestamp (newest first)
    combinedPosts.sort(
      (a: any, b: any) =>
        new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()
    );

    // Return the top 3 posts
    const latestPosts = combinedPosts.slice(0, 3);
    res.status(200).json({ success: true, data: latestPosts });
  } catch (error) {
    console.error('Error fetching social timeline:', error);
    res.status(500).json({ success: false, message: 'Internal server error' });
  }
}
