// pages/api/social-timeline/index.tsx
import type { NextApiRequest, NextApiResponse } from 'next';
import fetchInstagramPosts from '../../../utils/fetchInstagramPosts';
import fetchFacebookPosts from '../../../utils/fetchFacebookPosts';

// Make sure to connect to your MongoDB (if not done globally)
// For example, using a helper like: import connectDB from '../../../utils/connectDB';
// await connectDB();

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== 'GET') {
    return res.status(405).json({ success: false, message: "Method not allowed" });
  }

  try {
    // Fetch posts from both platforms concurrently
    const [instagramPosts, facebookPosts] = await Promise.all([
      fetchInstagramPosts(),
      fetchFacebookPosts(),
    ]);

    // Combine posts and sort by timestamp (newest first)
    const allPosts = [...instagramPosts, ...facebookPosts];
    const sortedPosts = allPosts.sort(
      (a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()
    );

    // Return the latest 3 posts
    res.status(200).json({ success: true, data: sortedPosts.slice(0, 3) });
  } catch (error) {
    console.error('Error fetching social media posts:', error);
    res.status(500).json({ success: false, message: "Internal server error" });
  }
}
