// utils/refreshTokensFromDB.ts
import axios from 'axios';
import Token from '../models/Token';

const TEN_DAYS_IN_MS = 10 * 24 * 60 * 60 * 1000;

export const refreshInstagramToken = async (): Promise<string> => {
  // Fetch token record from DB for Instagram
  const tokenRecord = await Token.findOne({ platform: 'instagram' });
  if (!tokenRecord) {
    throw new Error('No Instagram token stored in DB.');
  }

  const timeRemaining = tokenRecord.expiresAt.getTime() - Date.now();
  if (timeRemaining < TEN_DAYS_IN_MS) {
    // Call Instagram refresh endpoint
    const refreshUrl = `https://graph.instagram.com/refresh_access_token?grant_type=ig_refresh_token&access_token=${tokenRecord.accessToken}`;
    const { data } = await axios.get(refreshUrl);
    // Assuming the response includes "access_token" and "expires_in" (in seconds)
    if (data.access_token && data.access_token !== tokenRecord.accessToken) {
      tokenRecord.accessToken = data.access_token;
      tokenRecord.expiresAt = new Date(Date.now() + data.expires_in * 1000);
      tokenRecord.lastRefreshed = new Date();
      await tokenRecord.save();
    }
  }
  return tokenRecord.accessToken;
};

export const refreshFacebookToken = async (): Promise<string> => {
  // Fetch token record from DB for Facebook
  const tokenRecord = await Token.findOne({ platform: 'facebook' });
  if (!tokenRecord) {
    throw new Error('No Facebook token stored in DB.');
  }

  const timeRemaining = tokenRecord.expiresAt.getTime() - Date.now();
  if (timeRemaining < TEN_DAYS_IN_MS) {
    // Use your app credentials stored in env variables
    const appId = process.env.FACEBOOK_APP_ID;
    const appSecret = process.env.FACEBOOK_APP_SECRET;
    const refreshUrl = `https://graph.facebook.com/oauth/access_token?grant_type=fb_exchange_token&client_id=${appId}&client_secret=${appSecret}&fb_exchange_token=${tokenRecord.accessToken}`;
    const { data } = await axios.get(refreshUrl);
    if (data.access_token && data.access_token !== tokenRecord.accessToken) {
      tokenRecord.accessToken = data.access_token;
      tokenRecord.expiresAt = new Date(Date.now() + data.expires_in * 1000);
      tokenRecord.lastRefreshed = new Date();
      await tokenRecord.save();
    }
  }
  return tokenRecord.accessToken;
};
